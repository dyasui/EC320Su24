---
name: R
---

---

## What is [ ]{.nf}?

To quote the [[ ]{.nf} project website](https://www.r-project.org)^[[[R]{.mono} wikipedia](https://en.wikipedia.org/wiki/R_(programming_language))]

> R is a free software environment for statistical computing and graphics.
> It compiles and runs on a wide variety of UNIX platforms, Windows and MacOS.

. . .

What does that mean?

- [ ]{.nf} was created for the statistical and graphical work required by econometrics
--written by statistical programmers

- [ ]{.nf} has a vibrant, thriving online community. 
([stack overflow](https://stackoverflow.com/questions/tagged/r))

- Plus it's [free]{.hi}  and [open source]{.hi}

---

## Why are we using [ ]{.nf}?

1\. [ ]{.nf} is [free]{.hi} and [open source]{.hi}
—saving both you and the university money.

<br>

2\. _Related:_ Outside of a small group of economists, private- and public-sector 
[employers favor [ ]{.nf}]{.blue} over [Stata]{.hi} and most competing softwares.

<br>

3\. [ ]{.nf} is very [flexible and powerful]{.hi}
—adaptable to nearly any task, 
_e.g._, 'metrics, spatial data analysis, machine learning, web scraping, data cleaning,
website building, teaching. 
I write all my slides, problem sets, and exams in [R]{.mono}.

---

## Why are we using [ ]{.nf}?

4\. _Related:_ [ ]{.nf} imposes [no artificial restrictions]{.hi} 
on your amount of observations, variables, memory, or processing power.

<br>

5\. If you put in the work,
^[Learning [ ]{.nf} definitely requires time and effort.] 
you will come away with a [valuable and marketable]{.hi} tool.

<br>

6\. Learning [R]{.mono} and the tidyverse will help you to learn other useful tools like 
SQL, python, etc.

---

```{r}
#| echo: FALSE
#| fig-width: 14
#| fig-height: 10
#| fig-align: "center"

# The popularity data
pacman::p_load(tidyverse, magrittr, nord)
hi = nord_palettes$polarnight[3]
hii = nord_palettes$frost[3] 
pop_df <- data.frame(
  lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
  n_jobs = c(107130, 66976, 48772, 25644, 11464, 3717, 1624),
  free = c(T, T, T, F, F, F, F)
)
pop_df %<>% mutate(lang = lang %>% factor(ordered = T))
# Plot it
ggplot(data = pop_df, aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
ggtitle(
  "Comparing statistical languages",
  subtitle = "Number of job postings on Indeed.com, 2019/01/06"
) +
scale_fill_manual(
  "Free?",
  labels = c("True", "False"),
  values = c(hii, hi)
) +
hrbrthemes::theme_ipsum(base_size = 24) +
theme(legend.position = "bottom",
      axis.title.x = element_text(size = 18),
      axis.title.y = element_text(size = 18),
      plot.title = element_text(size = 48))
```

## Cool examples of what you can do with [ ]{.nf}

```{r}
#| eval: FALSE
#| echo: TRUE 
#| fig-align: "center"
# The package for animating ggplot2
library(gganimate); library(gapminder)
# the ggplot code used to plot the data
ggplot(
  data = gapminder %>% filter(continent != "Oceania"),
  aes(gdpPercap, lifeExp, size = pop, color = country)
) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10("GDP per capita", label = scales::comma) +
facet_wrap(~continent) +
# theme_pander(base_size = 16) +
theme(panel.border = element_rect(color = "grey90", fill = NA)) +
# Here comes the gganimate-specific bits
labs(title = "Year: {frame_time}") +
ylab("Life Expectancy") +
transition_time(year) +
ease_aes("linear")
```
---

```{r}
#| eval: TRUE
#| echo: FALSE 
#| fig-align: "center"
# The package for animating ggplot2
library(gganimate); library(gapminder)
# As before
ggplot(
  data = gapminder %>% filter(continent != "Oceania"),
  aes(gdpPercap, lifeExp, size = pop, color = country)
) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10("GDP per capita", label = scales::comma) +
facet_wrap(~continent) +
# theme_pander(base_size = 16) +
theme(panel.border = element_rect(color = "grey90", fill = NA)) +
# Here comes the gganimate-specific bits
labs(title = "Year: {frame_time}") +
ylab("Life Expectancy") +
transition_time(year) +
ease_aes("linear")
```

## R + Maps

```{r}
library(leaflet)
leaflet() %>%
  addTiles() %>%
  addMarkers(lng = -123.075, lat = 44.045, popup = "The University of Oregon")
```

# Getting started with [ ]{.nf} {.inverse}

---

## [ ]{.nf} setup for EC 320

[Installation]{.hi}

You need to install [2]{.hi} pieces of software:

- [[ ]{.nf}](https://cran.r-project.org/)
- [[RStudio]{.hi}](https://posit.co/download/rstudio-desktop/)  

. . .

For explicit instructions for how to install, 
follow [this tutorial](https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome)  

. . .

<br>

[Note:]{.note} [ ]{.nf}/[RStudio]{.hi} installations differ by operating system

---

## [R]{.mono .realbig} setup for EC 320 

::: {.align-center}
[ ]{.nf} [v.]{.small} [RStudio]{.hi}
:::

:::: {.columns}

::: {.column width="50%"}
- The programming language (ie english, spanish, french etc.)
- [Ex.]{.ex} The engine, chassis, wheels, etc. of a car
:::

::: {.column width="50%"}
- The Integrated Development Environment (IDE) (ie word processor)
- [Ex.]{.ex} The dashboard containing various buttons and monitors

:::

::::

. . .

[ ]{.nf} works without [RStudio]{.hi}

[RStudio]{.hi} doesn't work without [ ]{.nf}

---

## R basics

You will dive deeper in lab, but here six big points about [ ]{.nf}:

:::: {.columns}

::: {.column width="65%"}

1. Everything is an [object]{.hi}

1. Every object has a __name__ and __value__

1. You use __functions__ on these objects

1. Functions come in __libraries__ (__packages__)

1. R will try to __help__ you

1. R has its __quirks__

:::

::: {.column width="35%"}

`foo`

`foo <- 2`

`mean(foo)`

`library(dplyr)`

`?dplyr`

`NA; error; warning`

:::

::::
